= マイコン課題
＝ 「情報セキュリティI」課題 (渡邊 雄貴 さん) ＝

＜準備＞
本メールの末尾にあるC言語プログラムは，ASCII文字から成る文字列を
シーザー暗号で暗号化するプログラムです．変数 plainText に平文が，
char型の変数 key には鍵 (すなわち，「何文字ずらすか」の情報) が
入ります．また，この暗号化プログラムは，(ECBモードではなく)
CBCモードで暗号化するように作られています．char型の変数
initial_vector が「初期化ベクトル」を表しています．

本メール末尾のプログラムでは，サンプルとして，
「ait-yakusa」という文字列を鍵「123」と初期化ベクトル「10」で
暗号化するようにしてあります．

まずはコンパイル・実行して，結果を確かめてみてください．
出力として，(末尾のヌル文字を含む) 文字列の長さと
暗号化の結果 (16進数の列) が表示されると思います．


＜課題＞
このプログラムを使って，適当な鍵と初期化ベクトルを用いて
ある文字列を暗号化します (平文は「英単語1-英単語2」という
フォーマットになっています)．詳しくは，以下の通りです．
------------------------------------------------------------
＜初期化ベクトルの値＞
103

＜暗号化した結果 (16進数の列)＞
0xd3, 0x7d, 0xeb, 0x4f, 0xf8, 0x6a, 0xd1, 0x72, 0x2c, 0x10, 0x43, 0xf2, 0x64, 0xe3, 0x0

＜暗号文の長さ (ヌル文字を含めた文字数)＞
15
------------------------------------------------------------

しかし，鍵と平文は秘密です．

適当なプログラミング言語を使って，上記の暗号文を解読する
プログラムを作りなさい．そして，下記のウェブページに
アクセスするとフォームが表示されますから，答えを入力しなさい．
------------------------------------------------------------
ウェブアドレス： http://aitech.ac.jp/kwb/infoSec/kadai2/answer.html
返答期限： 7月21日 (月) 午後5時 (厳守)

＃ 提出後の「面談 (上記ウェブで詳細を説明)」は受けられませんが，
＃ 返答期限を過ぎても，成績投入期限 (おそらく，8月中旬) までは
＃ 解答の投入は受け付けます．
------------------------------------------------------------

なお，解答の曖昧さを避けるため1点だけ補足します．
今回の課題では，平文の英単語は「小文字のみ」から成るものと仮定します．
暗号解読の結果，場合によっては，文字コードの関係で大文字から成る英単語に
復号される場合があるのですが，それは解答とはみなさないものとします．

ブルートフォースアタックを行って全ての鍵を検査してもらうことになると
思いますが，その際，暗号文の文字が表示可能でない文字に復号される
可能性もあります．場合によっては画面が乱れてしまいますから，
C言語の「isprint関数」などを使って，表示可能文字のみ画面に
表示させるといった工夫をすると，チェックしやすくなると思います．

以下，暗号文の作成に用いた Cプログラムです．
============================================================
#include <stdio.h>

/* シーザー暗号の暗号化の鍵 (何文字ずらすか) */
unsigned char key = 123;

/* CBCモードの「初期化ベクトル」の値 */
unsigned char initial_vector = 10;

/* 平文を格納するための変数 */
unsigned char plainText[256] = "ait-yakusa";

/* 暗号文を格納するための変数 */
unsigned char cipherText[256];

// --- シーザー暗号による暗号化処理
unsigned char encrypt(unsigned char x, unsigned char key) {
  return((x + key) % 256);
}

// --- toplevel
int main()
{
  int i, len;
  unsigned char tmp;

  // 暗号化
  tmp = initial_vector;
  len = 0;
  for(i = 0; plainText[i] != '¥0'; i++) {
    cipherText[i] = encrypt(tmp ^ plainText[i], key);
    tmp = cipherText[i];
    len++;
  }

  // 暗号化の結果表示：以下を表示する
  //  - 文字列 (末尾のヌル文字も含む) の長さ
  //  - 暗号文 (16進数の列として)
  printf("Length of string: %d¥n", len+1);
  printf("Result of encryption: ");
  for(i = 0; i <= len; i++) {
    printf("0x%x", cipherText[i]);
    if(i < len) {
      printf(", ");
    }
  }
  printf("¥n");

  return 0;
}
============================================================
以上．
--
河辺
[2014-07-11 02:06] >>> ~/Dropbox/emacs/howm/2014/07/2014-07-06-080530.txt

