= セキュリティ課題
＝ 「情報セキュリティI」課題 (渡邊 雄貴 さん) ＝

＃ Mac OS X を使って課題を行うことを想定しますが，
＃ 他の UNIX (Linux，FreeBSDなど) で行っても構いません．

(0) 自分の PC に，Gnu PG をインストールしなさい．
＃ このファイルが読めているということは，ここまでは完了しているはず．

(1) 課題A：ウェブページ
     http://aitech.ac.jp/kwb/infoSec/kadai1/kadai.html
    にアクセスし，そこにある課題を行いなさい．

(2) 課題B：以下を実行して，数値を得なさい．
------------------------------------------------------------
1. 「ターミナル」を開きなさい．

2. コマンド
    echo "( 7576 ^ 2152 ) % 10000" | bc
   を実行しなさい．
------------------------------------------------------------

(3) ウェブページ

     http://aitech.ac.jp/kwb/infoSec/kadai1/answer.html

    にアクセスすると，フォームが表示されます．適切な記入欄に，
    課題Aの結果と，課題Bで画面に表示された数値を書き込みなさい．

以上．


============================================================
＜ヒント：コマンドラインからの Gnu PG の使い方＞

**************************************************
主な機能のみ，紹介しておきます．Gnu PGの使い方についての解説は
ウェブ等にゴロゴロ転がっているので，詳しくはそちらを調べてください．
**************************************************

＝暗号化＆復号＝

・共通鍵暗号による暗号化 (デフォルトの暗号アルゴリズムである「cast5」を用いる場合)
  ------------------------------------------------------------
  gpg -c ファイル名    (バイナリ形式で出力したい場合．「ファイル名.gpg」を出力)
  gpg -ca ファイル名   (ASCII形式で出力したい場合．「ファイル名.asc」を出力)
  ------------------------------------------------------------
  ＃ コマンド実行すると，暗号化鍵を作るための「パスフレーズ」を
  ＃ 聞かれるので，入力する．復号の際も，同じパスフレーズを入力すること．


・共通鍵暗号による暗号化 (暗号アルゴリズムを指定する場合．下記の例では
  トリプルDESを指定)．
  ------------------------------------------------------------
  gpg --cipher-algo 3des -c ファイル名    (バイナリ形式で出力したい場合)
  gpg --cipher-algo 3des -ca ファイル名   (ASCII形式で出力したい場合)
  ------------------------------------------------------------
  ＃ 暗号アルゴリズム (3des) のところは「cast5」「aes」なども指定可能．
  ＃ 暗号アルゴリズムの一覧は，「gpg --version」を実行すると表示される．


・公開鍵暗号による暗号化 (暗号化方式は，鍵のセットアップ時に指定)
  ------------------------------------------------------------
  gpg -r 受取人のメールアドレス -e ファイル名    (バイナリ形式で出力したい場合)
  gpg -r 受取人のメールアドレス -ea ファイル名   (ASCII形式で出力したい場合)
  ------------------------------------------------------------
  ＃ 受取人のアドレス (および，公開鍵) を，gpg内にあらかじめ登録
  ＃ する必要がある．「gpg --list-keys」を実行すれば，登録されて
  ＃ いる受取人の一覧が見られる．


・復号 (.gpg や .asc 形式の暗号文を，復号する)
  ------------------------------------------------------------
  gpg -d ファイル名
  ------------------------------------------------------------
  ＃ 復号された結果は，標準出力に書き出されます．
  ＃ 内容をファイルに保存したい場合は，リダイレクトの機能を使って
  ＃ (「gpg -d ファイル名 > 出力ファイル名.txt」のように)
  ＃ 対応してください．


＝公開鍵の管理＝

・登録されている公開鍵の一覧表示
  ------------------------------------------------------------
  gpg --list-keys
  ------------------------------------------------------------


・新しい公開鍵の登録 (ファイルから)
  ------------------------------------------------------------
  gpg --import 公開鍵のファイル名
  ------------------------------------------------------------
  ＃ 中間者攻撃の恐れもあるため，登録した鍵が本物かどうかを，
  ＃ 「gpg --fingerprint」を実行して確認すると良い (このコマンドで，
  ＃ 鍵の指紋が表示されます)．


・登録されている公開鍵の指紋の表示
  ------------------------------------------------------------
  gpg --fingerprint
  ------------------------------------------------------------


・鍵に対する署名：公開鍵が「信用」できる場合，自分の秘密鍵で署名する．
  ------------------------------------------------------------
  gpg --sign-key 宛先となるメールアドレス
  ------------------------------------------------------------
  ＃ その公開鍵を使用するときの「警告メッセージ」が出なくなる．
  ＃ もちろん，信用できるかわからない公開鍵に，むやみに署名しては
  ＃ いけない．


＝ディジタル署名＝

・署名
  ------------------------------------------------------------
  gpg -b ファイル名    (バイナリ形式の署名 (ファイル名.sig) を出力)
  gpg -ba ファイル名   (ASCII形式の署名 (ファイル名.asc) を出力)
  ------------------------------------------------------------


・署名の検証 (署名ファイルの拡張子にあわせて，以下のどちらかを実行すればよい)
  ------------------------------------------------------------
  gpg --verify 署名ファイル.sig もとのファイル名
  gpg --verify 署名ファイル.asc もとのファイル名
  ------------------------------------------------------------


============================================================

[2014-07-06 08:05] >>> ~/Desktop/GPGSec/homework.asc

