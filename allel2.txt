(setq make-backup-files t)
(setq backup-directory-alist
  (cons (cons "\\.*$" (expand-file-name "~/.emacs.d/backup"))
    backup-directory-alist))



(setq windmove-wrap-around t)
(windmove-default-keybindings)
(set-language-environment "Japanese")
(prefer-coding-system 'utf-8)

(when (eq system-type 'darwin)
  (require 'ucs-normalize)
  (set-file-name-coding-system 'utf-8-hfs)
  (setq locale-coding-system 'utf-8-hfs))

(when (eq window-system 'w32)
  (set-file-name-coding-system 'cp932)
  (setq locale-coding-system 'cp932))


(defun indent-whole-buffer ()
  (inrerctive)
  (indent-region (point-min) (point-max)))

(defun all-sjis ()
	(interactive)
	(set-default-coding-systems `sjis)
	(set-keyboard-coding-system `sjis)
	(setq default-buffer-file-coding-system `sjis))

(defun all-def ()
  (interactive)
	(set-default-coding-systems `utf-8)
	(set-keyboard-coding-system `utf-8)
	(setq default-buffer-file-coding-system `utf-8))

(defun duplicate-line (&optional numlines)
  "One line is duplicated wherever there is a cursor."
  (interactive "p")
  (let* ((col (current-column))
         (bol (progn (beginning-of-line) (point)))
         (eol (progn (end-of-line) (point)))
         (line (buffer-substring bol eol)))
    (while (> numlines 0)
      (insert "\n" line)
      (setq numlines (- numlines 1)))
    (move-to-column col)))

(defun indent-whole-buffer()
  (inrerctive)
  (indent-region (point-min) (point-max)))
(require 'dired-toggle)
(require 'popwin)
(require 'dired)
(require 'direx)

(dired-details-install)
(setq dired-details-hidden-string "")
(setq dired-details-hide-link-targets nil)

(defadvice find-dired-sentinel (after dired-details (proc state) activate)
  "find-diredでもdired-detailsを使えるようにする"
  (ignore-errors
    (with-current-buffer (process-buffer proc)
      (dired-details-activate))))

(global-set-key (kbd "C-x C-j") 'dired-toggle)

(add-hook 'dired-toggle-mode-hook
          (lambda () (interactive)
            (visual-line-mode 1)
            (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
            (setq-local word-wrap nil)))

(require 'smart-cursor-color)
(smart-cursor-color-mode t)


(column-number-mode)
(line-number-mode)
(global-linum-mode t)

(setq ring-bell-function 'ignore)
(defun count-lines-and-chars ()
  (if mark-active
      (format "[%d,%d] "
              (count-lines (region-beginning) (region-end))
              (- (region-end) (region-beginning)))
    ""))
(add-to-list 'default-mode-line-format
             '(:eval (count-lines-and-chars)))

(setq frame-title-format "%f")

;(setq scroll-conservatively 35
;      scroll-margin 0
;      scroll-step 1)

(setq line-mode-visual nil)


(defface hlline-facea
  '((((class color)
      (background dark))
     (:background "darkgreen"))
    (((class color)
      (background light))
     (:background "#CC0066"))
    (t
     ()))
  "*Face used by hl-line.")
(setq hl-line-face 'hlline-face)
(global-hl-line-mode)

(setq show-paren-delay 0) ; 表示までの秒数。初期値は0.125
(show-paren-mode t) ; 有効化
(setq show-paren-style 'expression)
(set-face-background 'show-paren-match-face nil)
(set-face-underline-p 'show-paren-match-face "yellow")

(if window-system (progn

  (add-to-list 'default-frame-alist '(foreground-color . "white"))
  (add-to-list 'default-frame-alist '(background-color . "black"))
  (add-to-list 'default-frame-alist '(cursor-color . "lightBlue2"))
  (add-to-list 'default-frame-alist '(mouse-color . "Blue2"))
  (set-face-foreground 'modeline "white")
  (set-face-background 'modeline "darkgreen")
  (set-face-background 'region "LightSteelBlue1")
  (set-face-foreground 'mode-line-inactive "gray30")
  (set-face-background 'mode-line-inactive "gray85")
  (set-frame-parameter nil 'alpha 100)



))

(set-frame-height (next-frame) 35)
(set-frame-width (next-frame) 120)

(require 'open-junk-file)
(setq open-junk-file-format "~/Dropbox/emacs/junk/%Y/%m/%Y-%m-%d-%H%M%S.")
(global-set-key (kbd "C-x j") 'open-junk-file)
 (set-face-attribute 'default nil

(set-fontset-font
 nil 'japanese-jisx0208

(setq face-font-rescale-alist
      '((".*Hiragino_Kaku_Gothic_ProN.*" . 1.2)))
(require 'package)

(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

; Initialize
(package-initialize)
(fset 'package-desc-vers 'package--ac-desc-version)
; melpa.el
;(require 'melpa)

;(require 'auto-install)
;(setq auto-install-directry "~/.emacs.d/auto-install/")
;(auto-install-update-emacswiki-package-name t)
;(auto-install-compatibility-setup)
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)


(require 'yen)
(when (require 'auto-complete-config nil t)
  (add-to-list 'ac-dictionary-directories 
    "~/.emacs.d/elisp/ac-dict")
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (ac-config-default))

 (global-auto-complete-mode)
(define-key ac-complete-mode-map "\C-j" 'ac-next)
(define-key ac-complete-mode-map "\C-k" 'ac-previous)
(require 'misc)
(require 'mwim)
(global-set-key (kbd "C-y") 'duplicate-line)

(global-set-key (kbd "s-;") 'indent-whole-buffer) 

(global-set-key (kbd "C-h") 'backward-delete-char)

(global-set-key (kbd "C-[left]") 'forward-word)
(global-set-key (kbd "C-[right]") 'backward-word)

(global-unset-key "\C-z")
(global-set-key (kbd "C-x i") 'imenu)

(global-set-key (kbd "C-a") 'mwim-beginning-of-code-or-line)
(global-set-key (kbd "C-e") 'mwim-end-of-code-or-line)


(cua-mode)
(setq cua-enable-cua-keys nil)
 
 
 


(require 'elscreen)
(elscreen-start)

(defmacro elscreen-create-automatically (ad-do-it)
  `(if (not (elscreen-one-screen-p))
       ,ad-do-it
     (elscreen-create)
     (elscreen-notify-screen-modification 'force-immediately)
     (elscreen-message "New screen is automatically created")))

(defadvice elscreen-next (around elscreen-create-automatically activate)
  (elscreen-create-automatically ad-do-it))

(defadvice elscreen-previous (around elscreen-create-automatically activate)
  (elscreen-create-automatically ad-do-it))

(defadvice elscreen-toggle (around elscreen-create-automatically activate)
  (elscreen-create-automatically ad-do-it))

(define-key global-map (kbd "C-o") 'elscreen-next)
(require 'howm)
(setq howm-menu-lang 'ja)

(setq howm-directory "~/Dropbox/emacs/howm/")

(global-set-key "\C-c,," 'howm-menu)
(mapc
 (lambda (f)
   (autoload f
     "howm" "Hitori Otegaru Wiki Modoki" t))
 '(howm-menu howm-list-all howm-list-recent
             howm-list-grep howm-create
             howm-keyword-to-kill-ring))

(defun howm-save-buffer-and-kill ()
  "howmメモを保存と同時に閉じます。"
  (interactive)
  (when (and (buffer-file-name)
             (string-match "\\.txt" (buffer-file-name)))
    (save-buffer)
    (kill-buffer nil)))

(define-key howm-mode-map (kbd "C-c C-c") 'howm-save-buffer-and-kill)

(require 'magit)
(require 'multiple-cursors)
(require 'smartrep)

(declare-function smartrep-define-key "smartrep")

(global-set-key (kbd "C-M-c") 'mc/edit-lines)
(global-set-key (kbd "C-M-r") 'mc/mark-all-in-region)

(global-unset-key "\C-t")

(smartrep-define-key global-map "C-t"
  '(("C-t"      . 'mc/mark-next-like-this)
    ("n"        . 'mc/mark-next-like-this)
    ("p"        . 'mc/mark-previous-like-this)
    ("m"        . 'mc/mark-more-like-this-extended)
    ("u"        . 'mc/unmark-next-like-this)
    ("U"        . 'mc/unmark-previous-like-this)
    ("s"        . 'mc/skip-to-next-like-this)
    ("S"        . 'mc/skip-to-previous-like-this)
    ("*"        . 'mc/mark-all-like-this)
    ("d"        . 'mc/mark-all-like-this-dwim)
    ("i"        . 'mc/insert-numbers)
    ("o"        . 'mc/sort-regions)
    ("O"        . 'mc/reverse-regions)))
(require 'popwin)
(popwin-mode 1)
(setq display-buffer-function 'popwin:display-buffer)


		 

(require 'direx)
(setq direx:leaf-icon " "
	  direx:open-icon "▼ "
	  direx:closed-icon "▶ ")
(push '(direx:direx-mode :position left :width 30 :dedicated t)
	  popwin:special-display-config)

(global-set-key (kbd "C-x C-j") 'direx:jump-to-directory-other-window)
	  

(require 'shell-pop)
(require 'exec-path-from-shell)

(exec-path-from-shell-initialize)

(global-set-key (kbd "C-p") 'shell-pop)
(add-hook 'eshell-mode-hook
		  '(lambda()
			 (progn
			   (define-key eshell-mode-map (kbd "C-f") 'find-file-other-window)
			   )))
(require 'tramp)
(setq tramp-default-method "ssh")

(require 'text-translator)
(setq text-translator-auto-selection-func
	  'text-translator-translate-by-auto-selection-enja)
(require 'key-combo)
(key-combo-define-global (kbd "=") '(" = " " == "))
(key-combo-mode)

(require 'moccur-edit)
(require 'color-moccur)

(global-set-key (kbd "C-x m") 'moccur)
(require 'pager)
(global-set-key (kbd "C-,")'pager-page-up)
(global-set-key (kbd "C-.")'pager-page-down)
(require 'redo+)
(require 'undo-tree)

(setq undo-no-redo t)
(setq undo-limit 60000)
(setq undo-strong-limit 90000)

(global-undo-tree-mode)

(require 'cl)
(require 'yasnippet)
(fset 'yes-or-no-p 'y-or-n-p)

(setq yas-snippet-dirs
	  '("~/.emacs.d/snippets"
		"~/.emacs.d/elpa/yasnippet-20130505.2115/snippets"))

(yas-global-mode)

(custom-set-variables '(yas-trigger-key "TAB"))

(define-key yas-minor-mode-map (kbd "C-x C-y C-n") 'yas-new-snippet)
(define-key yas-minor-mode-map (kbd "C-x C-y C-e") 'yas-visit-snippet-file)
(add-hook 'Java-mode-hook 'all-sjis)
(require 'flymake)

(require 'set-perl5lib)

(set-face-background 'flymake-errline "red4")
(set-face-foreground 'flymake-errline "black")
(set-face-background 'flymake-warnline "yellow")
(set-face-foreground 'flymake-warnline "black")

(defun flymake-display-err-minibuf ()
  "Displays the error/warning for the current line in the minibuffer"
  (interactive)
  (let* ((line-no             (flymake-current-line-no))
         (line-err-info-list  (nth 0 (flymake-find-err-info flymake-err-info line-no)))
         (count               (length line-err-info-list)))
    (while (> count 0)
      (when line-err-info-list
        (let* ((file       (flymake-ler-file (nth (1- count) line-err-info-list)))
               (full-file  (flymake-ler-full-file (nth (1- count) line-err-info-list)))
               (text (flymake-ler-text (nth (1- count) line-err-info-list)))
               (line       (flymake-ler-line (nth (1- count) line-err-info-list))))
          (message "[%s] %s" line text)))
      (setq count (1- count)))))

(defvar flymake-perl-err-line-patterns
  '(("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)))

(defconst flymake-allowed-perl-file-name-masks
  '(("\\.pl$" flymake-perl-init)
    ("\\.pm$" flymake-perl-init)
    ("\\.t$" flymake-perl-init)))

(defun flymake-perl-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name))))
    (list "perl" (list "-wc" local-file))))

(defun flymake-perl-load ()
  (interactive)
  (defadvice flymake-post-syntax-check (before flymake-force-check-was-interrupted)
    (setq flymake-check-was-interrupted t))
  (ad-activate 'flymake-post-syntax-check)
  (setq flymake-allowed-file-name-masks (append flymake-allowed-file-name-masks flymake-allowed-perl-file-name-masks))
  (setq flymake-err-line-patterns flymake-perl-err-line-patterns)
  (set-perl5lib)
  (flymake-mode t))

(add-hook 'cperl-mode-hook 'flymake-perl-load)
(require 'rcodetools)


(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(setq auto-mode-alist
      (append '(("\\.rb$" . ruby-mode)) auto-mode-alist))
(setq interpreter-mode-alist (append '(("ruby" . ruby-mode))
                                     interpreter-mode-alist))
(autoload 'run-ruby "inf-ruby"
  "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby"
  "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook
          '(lambda ()
            (inf-ruby-keys)))
(global-font-lock-mode 1)
(setq default-frame-alist
      (append
         (background-color . "black") ;
        )
 default-frame-alist))
 
(setq ruby-deep-indent-paren-style nil)
(defadvice ruby-indent-line (after unindent-closing-paren activate)
  (let ((column (current-column))
        indent offset)
    (save-excursion
      (back-to-indentation)
      (let ((state (syntax-ppss)))
        (setq offset (- column (current-column)))
        (when (and (eq (char-after) ?\))
                   (not (zerop (car state))))
          (goto-char (cadr state))
          (setq indent (current-indentation)))))
    (when indent
      (indent-line-to indent)
      (when (> offset 0) (forward-char offset)))))


(setq rct-find-tag-if-available nil)
(defun ruby-mode-hook-rcodetools ()
  (define-key ruby-mode-map (kbd "<C-tab>") 'rct-complete-symbol)
  (define-key ruby-mode-map (kbd "<C-return>") 'xmp))

;(global-set-key (kbd "<C-return>") 'xmp)

(add-hook 'ruby-mode-hook 'ruby-mode-hook-rcodetools)
(defun make-ruby-scratch-buffer ()
  (with-current-buffer (get-buffer-create "*ruby scratch*")
    (ruby-mode)
    (current-buffer)))
(defun ruby-scratch ()
  (interactive)
  (pop-to-buffer (make-ruby-scratch-buffer)))
(require 'helm)

(global-set-key (kbd "C-x C-h") 'helm-mini)
(global-set-key (kbd "C-c C-r") 'helm-recentf)
(helm-mode t)
